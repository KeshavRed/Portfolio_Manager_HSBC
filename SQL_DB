-- new
CREATE TABLE stocks (
    id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);
INSERT INTO stocks (id, name) VALUES
(1, 'Reliance Industries'),
(2, 'Tata Motors'),
(3, 'Infosys'),
(4, 'HDFC Bank'),
(5, 'ICICI Bank'),
(6, 'Wipro'),
(7, 'Asian Paints'),
(8, 'Hindustan Unilever'),
(9, 'Bajaj Finance'),
(10, 'Larsen & Toubro');
CREATE TABLE stock_prices (
    id INT AUTO_INCREMENT PRIMARY KEY,
    stock_id INT,
    price_date DATE,
    price DECIMAL(10, 2),
    FOREIGN KEY (stock_id) REFERENCES stocks(id)
);
DELIMITER $$

CREATE PROCEDURE insert_random_stock_prices()
BEGIN
    DECLARE stock_counter INT DEFAULT 1;
    DECLARE day_offset INT;
    DECLARE base_price DECIMAL(10,2);

    WHILE stock_counter <= 10 DO
        SET base_price = FLOOR(RAND() * 1000) + 100; -- base price between 100 to 1100
        SET day_offset = 0;

        WHILE day_offset < 365 DO
            INSERT INTO stock_prices (stock_id, price_date, price)
            VALUES (
                stock_counter,
                CURDATE() - INTERVAL day_offset DAY,
                ROUND(base_price + (RAND() * 50 - 25), 2) -- +/- 25 variation
            );
            SET day_offset = day_offset + 1;
        END WHILE;

        SET stock_counter = stock_counter + 1;
    END WHILE;
END $$

DELIMITER ;

-- Run the procedure
CALL insert_random_stock_prices();
-- Count total rows
SELECT COUNT(*) FROM stock_prices;

-- Sample prices for stock_id 1
SELECT * FROM stock_prices WHERE stock_id = 1 ORDER BY price_date DESC;

select * from stock_prices;

SELECT * FROM stock_prices 
WHERE stock_id = (SELECT id FROM stocks WHERE name = 'Wipro') 
AND price_date = '2025-08-02';

SELECT * FROM transactions
WHERE asset_id = (SELECT id FROM stocks WHERE name = 'Wipro');



WITH ranked_buys AS (
    SELECT 
        t.asset_id,
        t.quantity,
        t.price_at_transaction,
        SUM(t.quantity) OVER (
            PARTITION BY t.asset_id 
            ORDER BY t.transaction_date 
            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
        ) AS cumulative_quantity,
        t.transaction_date
    FROM transactions t
    WHERE t.transaction_type = 'buy'
),
total_buys AS (
    SELECT 
        rb.asset_id,
        rb.quantity,
        rb.price_at_transaction,
        rb.transaction_date,
        tb.total_available
    FROM ranked_buys rb
    JOIN (
        SELECT 
            t.asset_id,
            SUM(CASE WHEN t.transaction_type = 'buy' THEN t.quantity ELSE -t.quantity END) AS total_available
        FROM transactions t
        GROUP BY t.asset_id
    ) tb ON rb.asset_id = tb.asset_id
    WHERE rb.cumulative_quantity <= tb.total_available
),
current_cost AS (
    SELECT 
        asset_id,
        SUM(quantity * price_at_transaction) AS total_cost
    FROM total_buys
    GROUP BY asset_id
),
available_quantity AS (
    SELECT 
        t.asset_id,
        SUM(CASE WHEN t.transaction_type = 'buy' THEN t.quantity ELSE -t.quantity END) AS total_available
    FROM transactions t
    GROUP BY t.asset_id
)
SELECT 
    s.name AS stock_name,
    cc.asset_id,
    aq.total_available AS available_quantity,
    cc.total_cost AS net_investment,
    sp.price AS current_price,
    (aq.total_available * sp.price - cc.total_cost) AS profit_or_loss
FROM current_cost cc
JOIN available_quantity aq ON cc.asset_id = aq.asset_id
JOIN stocks s ON s.id = cc.asset_id
JOIN (
    SELECT stock_id, price
    FROM stock_prices
    WHERE price_date = '2025-08-02'
) sp ON sp.stock_id = s.id
WHERE aq.total_available > 0;



--mf
-- Mutual Funds Table
CREATE TABLE mutual_funds (
    id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

-- Insert Sample Mutual Funds
INSERT INTO mutual_funds (id, name) VALUES
(1, 'SBI Bluechip Fund'),
(2, 'HDFC Equity Fund'),
(3, 'ICICI Prudential Balanced Advantage Fund'),
(4, 'Axis Midcap Fund'),
(5, 'Nippon India Small Cap Fund'),
(6, 'UTI Nifty Index Fund'),
(7, 'Franklin India Taxshield'),
(8, 'Mirae Asset Emerging Bluechip Fund'),
(9, 'Parag Parikh Flexi Cap Fund'),
(10, 'Tata Digital India Fund');

-- Daily NAVs Table
CREATE TABLE mutual_fund_navs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    fund_id INT,
    nav_date DATE,
    nav DECIMAL(10, 2),
    FOREIGN KEY (fund_id) REFERENCES mutual_funds(id)
);

-- Stored Procedure to Insert Random NAVs
DELIMITER $$

CREATE PROCEDURE insert_random_mutual_fund_navs()
BEGIN
    DECLARE fund_counter INT DEFAULT 1;
    DECLARE day_offset INT;
    DECLARE base_nav DECIMAL(10,2);

    WHILE fund_counter <= 10 DO
        SET base_nav = FLOOR(RAND() * 50) + 10; -- base NAV between 10 and 60
        SET day_offset = 0;

        WHILE day_offset < 365 DO
            INSERT INTO mutual_fund_navs (fund_id, nav_date, nav)
            VALUES (
                fund_counter,
                CURDATE() - INTERVAL day_offset DAY,
                ROUND(base_nav + (RAND() * 5 - 2.5), 2) -- ±2.5 variation
            );
            SET day_offset = day_offset + 1;
        END WHILE;

        SET fund_counter = fund_counter + 1;
    END WHILE;
END $$

DELIMITER ;


CALL insert_random_mutual_fund_navs();


SELECT COUNT(*) FROM mutual_fund_navs;


SELECT * FROM mutual_fund_navs WHERE fund_id = 1 ORDER BY nav_date DESC;



--gold
CREATE TABLE gold_prices (
    id INT AUTO_INCREMENT PRIMARY KEY,
    price_date DATE NOT NULL UNIQUE,
    price_per_gram DECIMAL(10, 2) NOT NULL
);

DELIMITER $$

CREATE PROCEDURE insert_gold_prices()
BEGIN
    DECLARE i INT DEFAULT 0;
    DECLARE base_price DECIMAL(10, 2);
    DECLARE trend DECIMAL(10, 2);

    SET trend = 5500; -- starting price

    WHILE i < 365 DO
        -- Slight daily increase over the year except for last week
        IF i < 7 THEN
            -- Slight decreasing trend for last 7 days
            SET trend = trend - RAND() * 5;
        ELSE
            -- General upward trend with a small random increase
            SET trend = trend + RAND() * 10;
        END IF;

        -- Add some noise to avoid a perfectly linear trend
        SET base_price = ROUND(trend + (RAND() * 20 - 10), 2); -- add ±10 noise

        INSERT INTO gold_prices (price_date, price_per_gram)
        VALUES (CURDATE() - INTERVAL i DAY, base_price);

        SET i = i + 1;
    END WHILE;
END $$

DELIMITER ;


-- Call the procedure
CALL insert_gold_prices();

select * from gold_prices;

truncate table gold_prices;


--stock transactions

CREATE TABLE transactions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    asset_id INT NOT NULL,
    transaction_type ENUM('buy', 'sell') NOT NULL,
    quantity DECIMAL(10, 2) NOT NULL,
    price_at_transaction DECIMAL(10, 2) NOT NULL,
    transaction_date DATE NOT NULL,
    current_price DECIMAL(10, 2) NOT NULL
);

INSERT INTO transactions (asset_id, transaction_type, quantity, price_at_transaction, transaction_date, current_price)
SELECT
    sp1.stock_id,
    'buy',
    -- Quantity can be randomized or assigned manually
    CASE sp1.stock_id
        WHEN 1 THEN 10
        WHEN 2 THEN 20
        WHEN 3 THEN 15
        WHEN 4 THEN 12
        WHEN 5 THEN 18
        WHEN 6 THEN 25
        WHEN 7 THEN 8
        WHEN 8 THEN 5
        WHEN 9 THEN 6
        WHEN 10 THEN 10
    END AS quantity,
    sp1.price AS price_at_transaction,
    sp1.price_date AS transaction_date,
    sp2.price AS current_price
FROM 
    stock_prices sp1
JOIN 
    stock_prices sp2 
    ON sp1.stock_id = sp2.stock_id AND sp2.price_date = '2025-08-02'
WHERE 
    sp1.price_date = '2025-07-01'
    AND sp1.stock_id IN (1,2,3,4,5,6,7,8,9,10);


Drop table transactions;

truncate table transactions;

select * from transactions;

delete  from transactions where id=17;

SELECT 
  SUM(CASE 
        WHEN transaction_type = 'buy' THEN quantity 
        WHEN transaction_type = 'sell' THEN -quantity 
      END * current_price) AS stock_investment
FROM transactions;



-- gold
CREATE TABLE gold_transactions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    transaction_type ENUM('buy', 'sell') NOT NULL,
    quantity DECIMAL(10, 2) NOT NULL,
    price_at_transaction DECIMAL(10, 2) NOT NULL,
    transaction_date DATE NOT NULL,
    current_price DECIMAL(10, 2) NOT NULL
);

INSERT INTO gold_transactions (transaction_type, quantity, price_at_transaction, transaction_date, current_price)
SELECT
    'buy',
    CASE gp1.price_date
        WHEN '2025-07-01' THEN 10
        WHEN '2025-07-02' THEN 20
        WHEN '2025-07-03' THEN 15
        WHEN '2025-07-04' THEN 12
        WHEN '2025-07-05' THEN 18
        WHEN '2025-07-06' THEN 25
        WHEN '2025-07-07' THEN 8
        WHEN '2025-07-08' THEN 5
        WHEN '2025-07-09' THEN 6
        WHEN '2025-07-10' THEN 10
    END AS quantity,
    gp1.price_per_gram AS price_at_transaction,
    gp1.price_date AS transaction_date,
    gp2.price_per_gram AS current_price
FROM 
    gold_prices gp1
JOIN 
    gold_prices gp2 
    ON gp2.price_date = '2025-08-02'
WHERE 
    gp1.price_date IN (
        '2025-07-01', '2025-07-02', '2025-07-03', '2025-07-04', '2025-07-05',
        '2025-07-06', '2025-07-07', '2025-07-08', '2025-07-09', '2025-07-10'
    );


SELECT * FROM gold_transactions ORDER BY transaction_date DESC;

SELECT 
  SUM(CASE 
        WHEN transaction_type = 'buy' THEN quantity 
        WHEN transaction_type = 'sell' THEN -quantity 
      END * current_price) AS gold_investment
FROM gold_transactions;



    gp1.price_date AS transaction_date,
    gp2.price_per_gram AS current_price
FROM 
    gold_prices gp1
JOIN 
    gold_prices gp2 ON gp2.price_date = '2025-08-02'
WHERE 
    gp1.price_date BETWEEN '2025-07-01' AND '2025-07-10';

-- Unified transactions table (your improved schema)
CREATE TABLE all_transactions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    asset_type ENUM('stock','mutual_fund','gold') NOT NULL,
    asset_id INT NOT NULL,
    transaction_type ENUM('buy','sell') NOT NULL,
    quantity DECIMAL(10,2) NOT NULL,
    price_at_transaction DECIMAL(10,2) NOT NULL,
    transaction_date DATE NOT NULL,
    current_price DECIMAL(10,2) NOT NULL,
    INDEX idx_asset_type_id (asset_type, asset_id),
    INDEX idx_transaction_date (transaction_date)
);

-- Migrate existing data
INSERT INTO all_transactions (asset_type, asset_id, transaction_type, quantity, price_at_transaction, transaction_date, current_price)
SELECT 'stock', asset_id, transaction_type, quantity, price_at_transaction, transaction_date, current_price
FROM transactions;

INSERT INTO all_transactions (asset_type, asset_id, transaction_type, quantity, price_at_transaction, transaction_date, current_price)
SELECT 'gold', 1, transaction_type, quantity, price_at_transaction, transaction_date, current_price
FROM gold_transactions;
    gp1.price_date AS transaction_date,
    gp2.price_per_gram AS current_price
FROM 
    gold_prices gp1
JOIN 
    gold_prices gp2 ON gp2.price_date = CURDATE()
WHERE 
    gp1.price_date BETWEEN '2025-07-01' AND '2025-07-10';

-- MIGRATION: Create unified transactions table
CREATE TABLE all_transactions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    asset_type ENUM('stock','mutual_fund','gold') NOT NULL,
    asset_id INT NOT NULL,
    transaction_type ENUM('buy','sell') NOT NULL,
    quantity DECIMAL(10,2) NOT NULL,
    price_at_transaction DECIMAL(10,2) NOT NULL,
    transaction_date DATE NOT NULL,
    current_price DECIMAL(10,2) NOT NULL,
    user_id INT NOT NULL DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_asset_type_id (asset_type, asset_id),
    INDEX idx_transaction_date (transaction_date),
    INDEX idx_user_asset (user_id, asset_type, asset_id)
);

-- Migrate existing stock transactions
INSERT INTO all_transactions (asset_type, asset_id, transaction_type, quantity, price_at_transaction, transaction_date, current_price, user_id)
SELECT 'stock', asset_id, transaction_type, quantity, price_at_transaction, transaction_date, current_price, 1
FROM transactions;

-- Migrate existing gold transactions
INSERT INTO all_transactions (asset_type, asset_id, transaction_type, quantity, price_at_transaction, transaction_date, current_price, user_id)
SELECT 'gold', 1, transaction_type, quantity, price_at_transaction, transaction_date, current_price, 1
FROM gold_transactions;

-- Add sample mutual fund transactions
INSERT INTO all_transactions (asset_type, asset_id, transaction_type, quantity, price_at_transaction, transaction_date, current_price, user_id)
SELECT
    'mutual_fund',
    mfn1.fund_id,
    'buy',
    CASE mfn1.fund_id
        WHEN 1 THEN 100
        WHEN 2 THEN 150
        WHEN 3 THEN 200
        ELSE 100
    END AS quantity,
    mfn1.nav AS price_at_transaction,
    mfn1.nav_date AS transaction_date,
    mfn2.nav AS current_price,
    1
FROM 
    mutual_fund_navs mfn1
JOIN 
    mutual_fund_navs mfn2 ON mfn1.fund_id = mfn2.fund_id AND mfn2.nav_date = CURDATE()
WHERE 
    mfn1.nav_date = DATE_SUB(CURDATE(), INTERVAL 30 DAY)
    AND mfn1.fund_id IN (1,2,3);